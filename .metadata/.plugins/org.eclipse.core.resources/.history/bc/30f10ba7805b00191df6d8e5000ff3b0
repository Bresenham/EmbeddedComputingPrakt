#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>

void* p1Func(void *arg) {
	sleep(2);
	printf("Thread 1 calling\r\n");
	//*((int*)arg) = pthread_self();
	pthread_t p = pthread_self();
	pthread_exit(&p);
}

void* p2Func(void *arg) {
	sleep(3);
	printf("Thread 2 calling\r\n");
	//*((int*)arg) = pthread_self();
	pthread_t p = pthread_self();
	pthread_exit(&p);
}

int main(int argc, char *argv[]) {
	pthread_attr_t p1;
	pthread_attr_init(&p1);
	pthread_attr_setdetachstate(&p1, PTHREAD_CREATE_JOINABLE);

	pthread_attr_t p2;
	pthread_attr_init(&p2);
	pthread_attr_setdetachstate(&p2, PTHREAD_CREATE_JOINABLE);

	pthread_t p1Thread, p2Thread;
	pthread_create(&p1Thread, &p1, &p1Func, NULL);
	pthread_create(&p2Thread, &p2, &p2Func, NULL);

	pthread_t *p1IdAfter;
	pthread_t *p2IdAfter;

	pthread_join(p1Thread, &p1IdAfter);
	pthread_join(p2Thread, &p2IdAfter);

	printf("P1-Before: %d\r\nP1-After: %d\r\n", p1Thread, (*p1IdAfter));
	printf("P2-Before: %d\r\nP2-After: %d\r\n", p2Thread, (*p2IdAfter));

	return EXIT_SUCCESS;
}
